ID of the program: 7
ExeStack: 
Compound Stmt ( Compound Stmt ( ValDeclaration: int r, ValDeclaration: Ref(int) v1), Compound Stmt ( ValDeclaration: Ref(int) v2, Compound Stmt ( ValDeclaration: Ref(int) v3, Compound Stmt ( ValDeclaration: int cnt, Compound Stmt ( HeapAlloc Stmt: v1, Value exp: Int value: 2, Compound Stmt ( HeapAlloc Stmt: v2, Value exp: Int value: 3, Compound Stmt ( HeapAlloc Stmt: v3, Value exp: Int value: 4, Compound Stmt ( newLatch(cnt, HeapReading: VarEval exp : v2), Compound Stmt ( FORK ( Compound Stmt ( HeapWriting: v1: Arithmetic exp: HeapReading: VarEval exp : v1 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v1), Compound Stmt ( countDown(cnt), FORK ( Compound Stmt ( HeapWriting: v2: Arithmetic exp: HeapReading: VarEval exp : v2 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v2), Compound Stmt ( countDown(cnt), FORK ( Compound Stmt ( HeapWriting: v3: Arithmetic exp: HeapReading: VarEval exp : v3 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v3), countDown(cnt))) )))) )))) ), Compound Stmt ( await(cnt), Compound Stmt ( print (Value exp: Int value: 100), Compound Stmt ( countDown(cnt), print (Value exp: Int value: 100)))))))))))))
Symbols Table: 
{}
Output: 
File Table: 
{}
Heap: 
{}
LatchTable: 
{}
LockTable: 
{}

ID of the program: 7
ExeStack: 
Compound Stmt ( ValDeclaration: int r, ValDeclaration: Ref(int) v1)
Compound Stmt ( ValDeclaration: Ref(int) v2, Compound Stmt ( ValDeclaration: Ref(int) v3, Compound Stmt ( ValDeclaration: int cnt, Compound Stmt ( HeapAlloc Stmt: v1, Value exp: Int value: 2, Compound Stmt ( HeapAlloc Stmt: v2, Value exp: Int value: 3, Compound Stmt ( HeapAlloc Stmt: v3, Value exp: Int value: 4, Compound Stmt ( newLatch(cnt, HeapReading: VarEval exp : v2), Compound Stmt ( FORK ( Compound Stmt ( HeapWriting: v1: Arithmetic exp: HeapReading: VarEval exp : v1 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v1), Compound Stmt ( countDown(cnt), FORK ( Compound Stmt ( HeapWriting: v2: Arithmetic exp: HeapReading: VarEval exp : v2 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v2), Compound Stmt ( countDown(cnt), FORK ( Compound Stmt ( HeapWriting: v3: Arithmetic exp: HeapReading: VarEval exp : v3 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v3), countDown(cnt))) )))) )))) ), Compound Stmt ( await(cnt), Compound Stmt ( print (Value exp: Int value: 100), Compound Stmt ( countDown(cnt), print (Value exp: Int value: 100))))))))))))
Symbols Table: 
{}
Output: 
File Table: 
{}
Heap: 
{}
LatchTable: 
{}
LockTable: 
{}

ID of the program: 7
ExeStack: 
ValDeclaration: int r
ValDeclaration: Ref(int) v1
Compound Stmt ( ValDeclaration: Ref(int) v2, Compound Stmt ( ValDeclaration: Ref(int) v3, Compound Stmt ( ValDeclaration: int cnt, Compound Stmt ( HeapAlloc Stmt: v1, Value exp: Int value: 2, Compound Stmt ( HeapAlloc Stmt: v2, Value exp: Int value: 3, Compound Stmt ( HeapAlloc Stmt: v3, Value exp: Int value: 4, Compound Stmt ( newLatch(cnt, HeapReading: VarEval exp : v2), Compound Stmt ( FORK ( Compound Stmt ( HeapWriting: v1: Arithmetic exp: HeapReading: VarEval exp : v1 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v1), Compound Stmt ( countDown(cnt), FORK ( Compound Stmt ( HeapWriting: v2: Arithmetic exp: HeapReading: VarEval exp : v2 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v2), Compound Stmt ( countDown(cnt), FORK ( Compound Stmt ( HeapWriting: v3: Arithmetic exp: HeapReading: VarEval exp : v3 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v3), countDown(cnt))) )))) )))) ), Compound Stmt ( await(cnt), Compound Stmt ( print (Value exp: Int value: 100), Compound Stmt ( countDown(cnt), print (Value exp: Int value: 100))))))))))))
Symbols Table: 
{}
Output: 
File Table: 
{}
Heap: 
{}
LatchTable: 
{}
LockTable: 
{}

ID of the program: 7
ExeStack: 
ValDeclaration: Ref(int) v1
Compound Stmt ( ValDeclaration: Ref(int) v2, Compound Stmt ( ValDeclaration: Ref(int) v3, Compound Stmt ( ValDeclaration: int cnt, Compound Stmt ( HeapAlloc Stmt: v1, Value exp: Int value: 2, Compound Stmt ( HeapAlloc Stmt: v2, Value exp: Int value: 3, Compound Stmt ( HeapAlloc Stmt: v3, Value exp: Int value: 4, Compound Stmt ( newLatch(cnt, HeapReading: VarEval exp : v2), Compound Stmt ( FORK ( Compound Stmt ( HeapWriting: v1: Arithmetic exp: HeapReading: VarEval exp : v1 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v1), Compound Stmt ( countDown(cnt), FORK ( Compound Stmt ( HeapWriting: v2: Arithmetic exp: HeapReading: VarEval exp : v2 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v2), Compound Stmt ( countDown(cnt), FORK ( Compound Stmt ( HeapWriting: v3: Arithmetic exp: HeapReading: VarEval exp : v3 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v3), countDown(cnt))) )))) )))) ), Compound Stmt ( await(cnt), Compound Stmt ( print (Value exp: Int value: 100), Compound Stmt ( countDown(cnt), print (Value exp: Int value: 100))))))))))))
Symbols Table: 
{r=Int value: 0}
Output: 
File Table: 
{}
Heap: 
{}
LatchTable: 
{}
LockTable: 
{}

ID of the program: 7
ExeStack: 
Compound Stmt ( ValDeclaration: Ref(int) v2, Compound Stmt ( ValDeclaration: Ref(int) v3, Compound Stmt ( ValDeclaration: int cnt, Compound Stmt ( HeapAlloc Stmt: v1, Value exp: Int value: 2, Compound Stmt ( HeapAlloc Stmt: v2, Value exp: Int value: 3, Compound Stmt ( HeapAlloc Stmt: v3, Value exp: Int value: 4, Compound Stmt ( newLatch(cnt, HeapReading: VarEval exp : v2), Compound Stmt ( FORK ( Compound Stmt ( HeapWriting: v1: Arithmetic exp: HeapReading: VarEval exp : v1 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v1), Compound Stmt ( countDown(cnt), FORK ( Compound Stmt ( HeapWriting: v2: Arithmetic exp: HeapReading: VarEval exp : v2 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v2), Compound Stmt ( countDown(cnt), FORK ( Compound Stmt ( HeapWriting: v3: Arithmetic exp: HeapReading: VarEval exp : v3 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v3), countDown(cnt))) )))) )))) ), Compound Stmt ( await(cnt), Compound Stmt ( print (Value exp: Int value: 100), Compound Stmt ( countDown(cnt), print (Value exp: Int value: 100))))))))))))
Symbols Table: 
{r=Int value: 0, v1=(0, int)}
Output: 
File Table: 
{}
Heap: 
{}
LatchTable: 
{}
LockTable: 
{}

ID of the program: 7
ExeStack: 
ValDeclaration: Ref(int) v2
Compound Stmt ( ValDeclaration: Ref(int) v3, Compound Stmt ( ValDeclaration: int cnt, Compound Stmt ( HeapAlloc Stmt: v1, Value exp: Int value: 2, Compound Stmt ( HeapAlloc Stmt: v2, Value exp: Int value: 3, Compound Stmt ( HeapAlloc Stmt: v3, Value exp: Int value: 4, Compound Stmt ( newLatch(cnt, HeapReading: VarEval exp : v2), Compound Stmt ( FORK ( Compound Stmt ( HeapWriting: v1: Arithmetic exp: HeapReading: VarEval exp : v1 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v1), Compound Stmt ( countDown(cnt), FORK ( Compound Stmt ( HeapWriting: v2: Arithmetic exp: HeapReading: VarEval exp : v2 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v2), Compound Stmt ( countDown(cnt), FORK ( Compound Stmt ( HeapWriting: v3: Arithmetic exp: HeapReading: VarEval exp : v3 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v3), countDown(cnt))) )))) )))) ), Compound Stmt ( await(cnt), Compound Stmt ( print (Value exp: Int value: 100), Compound Stmt ( countDown(cnt), print (Value exp: Int value: 100)))))))))))
Symbols Table: 
{r=Int value: 0, v1=(0, int)}
Output: 
File Table: 
{}
Heap: 
{}
LatchTable: 
{}
LockTable: 
{}

ID of the program: 7
ExeStack: 
Compound Stmt ( ValDeclaration: Ref(int) v3, Compound Stmt ( ValDeclaration: int cnt, Compound Stmt ( HeapAlloc Stmt: v1, Value exp: Int value: 2, Compound Stmt ( HeapAlloc Stmt: v2, Value exp: Int value: 3, Compound Stmt ( HeapAlloc Stmt: v3, Value exp: Int value: 4, Compound Stmt ( newLatch(cnt, HeapReading: VarEval exp : v2), Compound Stmt ( FORK ( Compound Stmt ( HeapWriting: v1: Arithmetic exp: HeapReading: VarEval exp : v1 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v1), Compound Stmt ( countDown(cnt), FORK ( Compound Stmt ( HeapWriting: v2: Arithmetic exp: HeapReading: VarEval exp : v2 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v2), Compound Stmt ( countDown(cnt), FORK ( Compound Stmt ( HeapWriting: v3: Arithmetic exp: HeapReading: VarEval exp : v3 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v3), countDown(cnt))) )))) )))) ), Compound Stmt ( await(cnt), Compound Stmt ( print (Value exp: Int value: 100), Compound Stmt ( countDown(cnt), print (Value exp: Int value: 100)))))))))))
Symbols Table: 
{r=Int value: 0, v1=(0, int), v2=(0, int)}
Output: 
File Table: 
{}
Heap: 
{}
LatchTable: 
{}
LockTable: 
{}

ID of the program: 7
ExeStack: 
ValDeclaration: Ref(int) v3
Compound Stmt ( ValDeclaration: int cnt, Compound Stmt ( HeapAlloc Stmt: v1, Value exp: Int value: 2, Compound Stmt ( HeapAlloc Stmt: v2, Value exp: Int value: 3, Compound Stmt ( HeapAlloc Stmt: v3, Value exp: Int value: 4, Compound Stmt ( newLatch(cnt, HeapReading: VarEval exp : v2), Compound Stmt ( FORK ( Compound Stmt ( HeapWriting: v1: Arithmetic exp: HeapReading: VarEval exp : v1 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v1), Compound Stmt ( countDown(cnt), FORK ( Compound Stmt ( HeapWriting: v2: Arithmetic exp: HeapReading: VarEval exp : v2 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v2), Compound Stmt ( countDown(cnt), FORK ( Compound Stmt ( HeapWriting: v3: Arithmetic exp: HeapReading: VarEval exp : v3 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v3), countDown(cnt))) )))) )))) ), Compound Stmt ( await(cnt), Compound Stmt ( print (Value exp: Int value: 100), Compound Stmt ( countDown(cnt), print (Value exp: Int value: 100))))))))))
Symbols Table: 
{r=Int value: 0, v1=(0, int), v2=(0, int)}
Output: 
File Table: 
{}
Heap: 
{}
LatchTable: 
{}
LockTable: 
{}

ID of the program: 7
ExeStack: 
Compound Stmt ( ValDeclaration: int cnt, Compound Stmt ( HeapAlloc Stmt: v1, Value exp: Int value: 2, Compound Stmt ( HeapAlloc Stmt: v2, Value exp: Int value: 3, Compound Stmt ( HeapAlloc Stmt: v3, Value exp: Int value: 4, Compound Stmt ( newLatch(cnt, HeapReading: VarEval exp : v2), Compound Stmt ( FORK ( Compound Stmt ( HeapWriting: v1: Arithmetic exp: HeapReading: VarEval exp : v1 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v1), Compound Stmt ( countDown(cnt), FORK ( Compound Stmt ( HeapWriting: v2: Arithmetic exp: HeapReading: VarEval exp : v2 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v2), Compound Stmt ( countDown(cnt), FORK ( Compound Stmt ( HeapWriting: v3: Arithmetic exp: HeapReading: VarEval exp : v3 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v3), countDown(cnt))) )))) )))) ), Compound Stmt ( await(cnt), Compound Stmt ( print (Value exp: Int value: 100), Compound Stmt ( countDown(cnt), print (Value exp: Int value: 100))))))))))
Symbols Table: 
{r=Int value: 0, v1=(0, int), v2=(0, int), v3=(0, int)}
Output: 
File Table: 
{}
Heap: 
{}
LatchTable: 
{}
LockTable: 
{}

ID of the program: 7
ExeStack: 
ValDeclaration: int cnt
Compound Stmt ( HeapAlloc Stmt: v1, Value exp: Int value: 2, Compound Stmt ( HeapAlloc Stmt: v2, Value exp: Int value: 3, Compound Stmt ( HeapAlloc Stmt: v3, Value exp: Int value: 4, Compound Stmt ( newLatch(cnt, HeapReading: VarEval exp : v2), Compound Stmt ( FORK ( Compound Stmt ( HeapWriting: v1: Arithmetic exp: HeapReading: VarEval exp : v1 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v1), Compound Stmt ( countDown(cnt), FORK ( Compound Stmt ( HeapWriting: v2: Arithmetic exp: HeapReading: VarEval exp : v2 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v2), Compound Stmt ( countDown(cnt), FORK ( Compound Stmt ( HeapWriting: v3: Arithmetic exp: HeapReading: VarEval exp : v3 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v3), countDown(cnt))) )))) )))) ), Compound Stmt ( await(cnt), Compound Stmt ( print (Value exp: Int value: 100), Compound Stmt ( countDown(cnt), print (Value exp: Int value: 100)))))))))
Symbols Table: 
{r=Int value: 0, v1=(0, int), v2=(0, int), v3=(0, int)}
Output: 
File Table: 
{}
Heap: 
{}
LatchTable: 
{}
LockTable: 
{}

ID of the program: 7
ExeStack: 
Compound Stmt ( HeapAlloc Stmt: v1, Value exp: Int value: 2, Compound Stmt ( HeapAlloc Stmt: v2, Value exp: Int value: 3, Compound Stmt ( HeapAlloc Stmt: v3, Value exp: Int value: 4, Compound Stmt ( newLatch(cnt, HeapReading: VarEval exp : v2), Compound Stmt ( FORK ( Compound Stmt ( HeapWriting: v1: Arithmetic exp: HeapReading: VarEval exp : v1 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v1), Compound Stmt ( countDown(cnt), FORK ( Compound Stmt ( HeapWriting: v2: Arithmetic exp: HeapReading: VarEval exp : v2 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v2), Compound Stmt ( countDown(cnt), FORK ( Compound Stmt ( HeapWriting: v3: Arithmetic exp: HeapReading: VarEval exp : v3 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v3), countDown(cnt))) )))) )))) ), Compound Stmt ( await(cnt), Compound Stmt ( print (Value exp: Int value: 100), Compound Stmt ( countDown(cnt), print (Value exp: Int value: 100)))))))))
Symbols Table: 
{r=Int value: 0, cnt=Int value: 0, v1=(0, int), v2=(0, int), v3=(0, int)}
Output: 
File Table: 
{}
Heap: 
{}
LatchTable: 
{}
LockTable: 
{}

ID of the program: 7
ExeStack: 
HeapAlloc Stmt: v1, Value exp: Int value: 2
Compound Stmt ( HeapAlloc Stmt: v2, Value exp: Int value: 3, Compound Stmt ( HeapAlloc Stmt: v3, Value exp: Int value: 4, Compound Stmt ( newLatch(cnt, HeapReading: VarEval exp : v2), Compound Stmt ( FORK ( Compound Stmt ( HeapWriting: v1: Arithmetic exp: HeapReading: VarEval exp : v1 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v1), Compound Stmt ( countDown(cnt), FORK ( Compound Stmt ( HeapWriting: v2: Arithmetic exp: HeapReading: VarEval exp : v2 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v2), Compound Stmt ( countDown(cnt), FORK ( Compound Stmt ( HeapWriting: v3: Arithmetic exp: HeapReading: VarEval exp : v3 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v3), countDown(cnt))) )))) )))) ), Compound Stmt ( await(cnt), Compound Stmt ( print (Value exp: Int value: 100), Compound Stmt ( countDown(cnt), print (Value exp: Int value: 100))))))))
Symbols Table: 
{r=Int value: 0, cnt=Int value: 0, v1=(0, int), v2=(0, int), v3=(0, int)}
Output: 
File Table: 
{}
Heap: 
{}
LatchTable: 
{}
LockTable: 
{}

ID of the program: 7
ExeStack: 
Compound Stmt ( HeapAlloc Stmt: v2, Value exp: Int value: 3, Compound Stmt ( HeapAlloc Stmt: v3, Value exp: Int value: 4, Compound Stmt ( newLatch(cnt, HeapReading: VarEval exp : v2), Compound Stmt ( FORK ( Compound Stmt ( HeapWriting: v1: Arithmetic exp: HeapReading: VarEval exp : v1 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v1), Compound Stmt ( countDown(cnt), FORK ( Compound Stmt ( HeapWriting: v2: Arithmetic exp: HeapReading: VarEval exp : v2 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v2), Compound Stmt ( countDown(cnt), FORK ( Compound Stmt ( HeapWriting: v3: Arithmetic exp: HeapReading: VarEval exp : v3 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v3), countDown(cnt))) )))) )))) ), Compound Stmt ( await(cnt), Compound Stmt ( print (Value exp: Int value: 100), Compound Stmt ( countDown(cnt), print (Value exp: Int value: 100))))))))
Symbols Table: 
{r=Int value: 0, cnt=Int value: 0, v1=(1, int), v2=(0, int), v3=(0, int)}
Output: 
File Table: 
{}
Heap: 
{1=Int value: 2}
LatchTable: 
{}
LockTable: 
{}

ID of the program: 7
ExeStack: 
HeapAlloc Stmt: v2, Value exp: Int value: 3
Compound Stmt ( HeapAlloc Stmt: v3, Value exp: Int value: 4, Compound Stmt ( newLatch(cnt, HeapReading: VarEval exp : v2), Compound Stmt ( FORK ( Compound Stmt ( HeapWriting: v1: Arithmetic exp: HeapReading: VarEval exp : v1 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v1), Compound Stmt ( countDown(cnt), FORK ( Compound Stmt ( HeapWriting: v2: Arithmetic exp: HeapReading: VarEval exp : v2 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v2), Compound Stmt ( countDown(cnt), FORK ( Compound Stmt ( HeapWriting: v3: Arithmetic exp: HeapReading: VarEval exp : v3 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v3), countDown(cnt))) )))) )))) ), Compound Stmt ( await(cnt), Compound Stmt ( print (Value exp: Int value: 100), Compound Stmt ( countDown(cnt), print (Value exp: Int value: 100)))))))
Symbols Table: 
{r=Int value: 0, cnt=Int value: 0, v1=(1, int), v2=(0, int), v3=(0, int)}
Output: 
File Table: 
{}
Heap: 
{1=Int value: 2}
LatchTable: 
{}
LockTable: 
{}

ID of the program: 7
ExeStack: 
Compound Stmt ( HeapAlloc Stmt: v3, Value exp: Int value: 4, Compound Stmt ( newLatch(cnt, HeapReading: VarEval exp : v2), Compound Stmt ( FORK ( Compound Stmt ( HeapWriting: v1: Arithmetic exp: HeapReading: VarEval exp : v1 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v1), Compound Stmt ( countDown(cnt), FORK ( Compound Stmt ( HeapWriting: v2: Arithmetic exp: HeapReading: VarEval exp : v2 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v2), Compound Stmt ( countDown(cnt), FORK ( Compound Stmt ( HeapWriting: v3: Arithmetic exp: HeapReading: VarEval exp : v3 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v3), countDown(cnt))) )))) )))) ), Compound Stmt ( await(cnt), Compound Stmt ( print (Value exp: Int value: 100), Compound Stmt ( countDown(cnt), print (Value exp: Int value: 100)))))))
Symbols Table: 
{r=Int value: 0, cnt=Int value: 0, v1=(1, int), v2=(2, int), v3=(0, int)}
Output: 
File Table: 
{}
Heap: 
{1=Int value: 2, 2=Int value: 3}
LatchTable: 
{}
LockTable: 
{}

ID of the program: 7
ExeStack: 
HeapAlloc Stmt: v3, Value exp: Int value: 4
Compound Stmt ( newLatch(cnt, HeapReading: VarEval exp : v2), Compound Stmt ( FORK ( Compound Stmt ( HeapWriting: v1: Arithmetic exp: HeapReading: VarEval exp : v1 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v1), Compound Stmt ( countDown(cnt), FORK ( Compound Stmt ( HeapWriting: v2: Arithmetic exp: HeapReading: VarEval exp : v2 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v2), Compound Stmt ( countDown(cnt), FORK ( Compound Stmt ( HeapWriting: v3: Arithmetic exp: HeapReading: VarEval exp : v3 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v3), countDown(cnt))) )))) )))) ), Compound Stmt ( await(cnt), Compound Stmt ( print (Value exp: Int value: 100), Compound Stmt ( countDown(cnt), print (Value exp: Int value: 100))))))
Symbols Table: 
{r=Int value: 0, cnt=Int value: 0, v1=(1, int), v2=(2, int), v3=(0, int)}
Output: 
File Table: 
{}
Heap: 
{1=Int value: 2, 2=Int value: 3}
LatchTable: 
{}
LockTable: 
{}

ID of the program: 7
ExeStack: 
Compound Stmt ( newLatch(cnt, HeapReading: VarEval exp : v2), Compound Stmt ( FORK ( Compound Stmt ( HeapWriting: v1: Arithmetic exp: HeapReading: VarEval exp : v1 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v1), Compound Stmt ( countDown(cnt), FORK ( Compound Stmt ( HeapWriting: v2: Arithmetic exp: HeapReading: VarEval exp : v2 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v2), Compound Stmt ( countDown(cnt), FORK ( Compound Stmt ( HeapWriting: v3: Arithmetic exp: HeapReading: VarEval exp : v3 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v3), countDown(cnt))) )))) )))) ), Compound Stmt ( await(cnt), Compound Stmt ( print (Value exp: Int value: 100), Compound Stmt ( countDown(cnt), print (Value exp: Int value: 100))))))
Symbols Table: 
{r=Int value: 0, cnt=Int value: 0, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: 
File Table: 
{}
Heap: 
{1=Int value: 2, 2=Int value: 3, 3=Int value: 4}
LatchTable: 
{}
LockTable: 
{}

ID of the program: 7
ExeStack: 
newLatch(cnt, HeapReading: VarEval exp : v2)
Compound Stmt ( FORK ( Compound Stmt ( HeapWriting: v1: Arithmetic exp: HeapReading: VarEval exp : v1 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v1), Compound Stmt ( countDown(cnt), FORK ( Compound Stmt ( HeapWriting: v2: Arithmetic exp: HeapReading: VarEval exp : v2 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v2), Compound Stmt ( countDown(cnt), FORK ( Compound Stmt ( HeapWriting: v3: Arithmetic exp: HeapReading: VarEval exp : v3 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v3), countDown(cnt))) )))) )))) ), Compound Stmt ( await(cnt), Compound Stmt ( print (Value exp: Int value: 100), Compound Stmt ( countDown(cnt), print (Value exp: Int value: 100)))))
Symbols Table: 
{r=Int value: 0, cnt=Int value: 0, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: 
File Table: 
{}
Heap: 
{1=Int value: 2, 2=Int value: 3, 3=Int value: 4}
LatchTable: 
{}
LockTable: 
{}

ID of the program: 7
ExeStack: 
Compound Stmt ( FORK ( Compound Stmt ( HeapWriting: v1: Arithmetic exp: HeapReading: VarEval exp : v1 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v1), Compound Stmt ( countDown(cnt), FORK ( Compound Stmt ( HeapWriting: v2: Arithmetic exp: HeapReading: VarEval exp : v2 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v2), Compound Stmt ( countDown(cnt), FORK ( Compound Stmt ( HeapWriting: v3: Arithmetic exp: HeapReading: VarEval exp : v3 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v3), countDown(cnt))) )))) )))) ), Compound Stmt ( await(cnt), Compound Stmt ( print (Value exp: Int value: 100), Compound Stmt ( countDown(cnt), print (Value exp: Int value: 100)))))
Symbols Table: 
{r=Int value: 0, cnt=Int value: 1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: 
File Table: 
{}
Heap: 
{1=Int value: 2, 2=Int value: 3, 3=Int value: 4}
LatchTable: 
{1=3}
LockTable: 
{}

ID of the program: 7
ExeStack: 
FORK ( Compound Stmt ( HeapWriting: v1: Arithmetic exp: HeapReading: VarEval exp : v1 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v1), Compound Stmt ( countDown(cnt), FORK ( Compound Stmt ( HeapWriting: v2: Arithmetic exp: HeapReading: VarEval exp : v2 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v2), Compound Stmt ( countDown(cnt), FORK ( Compound Stmt ( HeapWriting: v3: Arithmetic exp: HeapReading: VarEval exp : v3 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v3), countDown(cnt))) )))) )))) )
Compound Stmt ( await(cnt), Compound Stmt ( print (Value exp: Int value: 100), Compound Stmt ( countDown(cnt), print (Value exp: Int value: 100))))
Symbols Table: 
{r=Int value: 0, cnt=Int value: 1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: 
File Table: 
{}
Heap: 
{1=Int value: 2, 2=Int value: 3, 3=Int value: 4}
LatchTable: 
{1=3}
LockTable: 
{}

ID of the program: 7
ExeStack: 
Compound Stmt ( await(cnt), Compound Stmt ( print (Value exp: Int value: 100), Compound Stmt ( countDown(cnt), print (Value exp: Int value: 100))))
Symbols Table: 
{r=Int value: 0, cnt=Int value: 1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: 
File Table: 
{}
Heap: 
{1=Int value: 2, 2=Int value: 3, 3=Int value: 4}
LatchTable: 
{1=3}
LockTable: 
{}

ID of the program: 16
ExeStack: 
Compound Stmt ( HeapWriting: v1: Arithmetic exp: HeapReading: VarEval exp : v1 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v1), Compound Stmt ( countDown(cnt), FORK ( Compound Stmt ( HeapWriting: v2: Arithmetic exp: HeapReading: VarEval exp : v2 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v2), Compound Stmt ( countDown(cnt), FORK ( Compound Stmt ( HeapWriting: v3: Arithmetic exp: HeapReading: VarEval exp : v3 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v3), countDown(cnt))) )))) ))))
Symbols Table: 
{r=Int value: 0, cnt=Int value: 1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: 
File Table: 
{}
Heap: 
{1=Int value: 2, 2=Int value: 3, 3=Int value: 4}
LatchTable: 
{1=3}
LockTable: 
{}

ID of the program: 7
ExeStack: 
await(cnt)
Compound Stmt ( print (Value exp: Int value: 100), Compound Stmt ( countDown(cnt), print (Value exp: Int value: 100)))
Symbols Table: 
{r=Int value: 0, cnt=Int value: 1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: 
File Table: 
{}
Heap: 
{1=Int value: 2, 2=Int value: 3, 3=Int value: 4}
LatchTable: 
{1=3}
LockTable: 
{}

ID of the program: 16
ExeStack: 
HeapWriting: v1: Arithmetic exp: HeapReading: VarEval exp : v1 * Value exp: Int value: 10
Compound Stmt ( print (HeapReading: VarEval exp : v1), Compound Stmt ( countDown(cnt), FORK ( Compound Stmt ( HeapWriting: v2: Arithmetic exp: HeapReading: VarEval exp : v2 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v2), Compound Stmt ( countDown(cnt), FORK ( Compound Stmt ( HeapWriting: v3: Arithmetic exp: HeapReading: VarEval exp : v3 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v3), countDown(cnt))) )))) )))
Symbols Table: 
{r=Int value: 0, cnt=Int value: 1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: 
File Table: 
{}
Heap: 
{1=Int value: 2, 2=Int value: 3, 3=Int value: 4}
LatchTable: 
{1=3}
LockTable: 
{}

ID of the program: 7
ExeStack: 
await(cnt)
Compound Stmt ( print (Value exp: Int value: 100), Compound Stmt ( countDown(cnt), print (Value exp: Int value: 100)))
Symbols Table: 
{r=Int value: 0, cnt=Int value: 1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: 
File Table: 
{}
Heap: 
{1=Int value: 20, 2=Int value: 3, 3=Int value: 4}
LatchTable: 
{1=3}
LockTable: 
{}

ID of the program: 16
ExeStack: 
Compound Stmt ( print (HeapReading: VarEval exp : v1), Compound Stmt ( countDown(cnt), FORK ( Compound Stmt ( HeapWriting: v2: Arithmetic exp: HeapReading: VarEval exp : v2 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v2), Compound Stmt ( countDown(cnt), FORK ( Compound Stmt ( HeapWriting: v3: Arithmetic exp: HeapReading: VarEval exp : v3 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v3), countDown(cnt))) )))) )))
Symbols Table: 
{r=Int value: 0, cnt=Int value: 1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: 
File Table: 
{}
Heap: 
{1=Int value: 20, 2=Int value: 3, 3=Int value: 4}
LatchTable: 
{1=3}
LockTable: 
{}

ID of the program: 7
ExeStack: 
await(cnt)
Compound Stmt ( print (Value exp: Int value: 100), Compound Stmt ( countDown(cnt), print (Value exp: Int value: 100)))
Symbols Table: 
{r=Int value: 0, cnt=Int value: 1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: 
File Table: 
{}
Heap: 
{1=Int value: 20, 2=Int value: 3, 3=Int value: 4}
LatchTable: 
{1=3}
LockTable: 
{}

ID of the program: 16
ExeStack: 
print (HeapReading: VarEval exp : v1)
Compound Stmt ( countDown(cnt), FORK ( Compound Stmt ( HeapWriting: v2: Arithmetic exp: HeapReading: VarEval exp : v2 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v2), Compound Stmt ( countDown(cnt), FORK ( Compound Stmt ( HeapWriting: v3: Arithmetic exp: HeapReading: VarEval exp : v3 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v3), countDown(cnt))) )))) ))
Symbols Table: 
{r=Int value: 0, cnt=Int value: 1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: 
File Table: 
{}
Heap: 
{1=Int value: 20, 2=Int value: 3, 3=Int value: 4}
LatchTable: 
{1=3}
LockTable: 
{}

ID of the program: 7
ExeStack: 
await(cnt)
Compound Stmt ( print (Value exp: Int value: 100), Compound Stmt ( countDown(cnt), print (Value exp: Int value: 100)))
Symbols Table: 
{r=Int value: 0, cnt=Int value: 1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: 
Int value: 20
File Table: 
{}
Heap: 
{1=Int value: 20, 2=Int value: 3, 3=Int value: 4}
LatchTable: 
{1=3}
LockTable: 
{}

ID of the program: 16
ExeStack: 
Compound Stmt ( countDown(cnt), FORK ( Compound Stmt ( HeapWriting: v2: Arithmetic exp: HeapReading: VarEval exp : v2 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v2), Compound Stmt ( countDown(cnt), FORK ( Compound Stmt ( HeapWriting: v3: Arithmetic exp: HeapReading: VarEval exp : v3 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v3), countDown(cnt))) )))) ))
Symbols Table: 
{r=Int value: 0, cnt=Int value: 1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: 
Int value: 20
File Table: 
{}
Heap: 
{1=Int value: 20, 2=Int value: 3, 3=Int value: 4}
LatchTable: 
{1=3}
LockTable: 
{}

ID of the program: 7
ExeStack: 
await(cnt)
Compound Stmt ( print (Value exp: Int value: 100), Compound Stmt ( countDown(cnt), print (Value exp: Int value: 100)))
Symbols Table: 
{r=Int value: 0, cnt=Int value: 1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: 
Int value: 20
File Table: 
{}
Heap: 
{1=Int value: 20, 2=Int value: 3, 3=Int value: 4}
LatchTable: 
{1=3}
LockTable: 
{}

ID of the program: 16
ExeStack: 
countDown(cnt)
FORK ( Compound Stmt ( HeapWriting: v2: Arithmetic exp: HeapReading: VarEval exp : v2 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v2), Compound Stmt ( countDown(cnt), FORK ( Compound Stmt ( HeapWriting: v3: Arithmetic exp: HeapReading: VarEval exp : v3 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v3), countDown(cnt))) )))) )
Symbols Table: 
{r=Int value: 0, cnt=Int value: 1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: 
Int value: 20
File Table: 
{}
Heap: 
{1=Int value: 20, 2=Int value: 3, 3=Int value: 4}
LatchTable: 
{1=3}
LockTable: 
{}

ID of the program: 7
ExeStack: 
await(cnt)
Compound Stmt ( print (Value exp: Int value: 100), Compound Stmt ( countDown(cnt), print (Value exp: Int value: 100)))
Symbols Table: 
{r=Int value: 0, cnt=Int value: 1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: 
Int value: 20
Int value: 16
File Table: 
{}
Heap: 
{1=Int value: 20, 2=Int value: 3, 3=Int value: 4}
LatchTable: 
{1=2}
LockTable: 
{}

ID of the program: 16
ExeStack: 
FORK ( Compound Stmt ( HeapWriting: v2: Arithmetic exp: HeapReading: VarEval exp : v2 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v2), Compound Stmt ( countDown(cnt), FORK ( Compound Stmt ( HeapWriting: v3: Arithmetic exp: HeapReading: VarEval exp : v3 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v3), countDown(cnt))) )))) )
Symbols Table: 
{r=Int value: 0, cnt=Int value: 1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: 
Int value: 20
Int value: 16
File Table: 
{}
Heap: 
{1=Int value: 20, 2=Int value: 3, 3=Int value: 4}
LatchTable: 
{1=2}
LockTable: 
{}

ID of the program: 7
ExeStack: 
await(cnt)
Compound Stmt ( print (Value exp: Int value: 100), Compound Stmt ( countDown(cnt), print (Value exp: Int value: 100)))
Symbols Table: 
{r=Int value: 0, cnt=Int value: 1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: 
Int value: 20
Int value: 16
File Table: 
{}
Heap: 
{1=Int value: 20, 2=Int value: 3, 3=Int value: 4}
LatchTable: 
{1=2}
LockTable: 
{}

ID of the program: 16
ExeStack: 
Symbols Table: 
{r=Int value: 0, cnt=Int value: 1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: 
Int value: 20
Int value: 16
File Table: 
{}
Heap: 
{1=Int value: 20, 2=Int value: 3, 3=Int value: 4}
LatchTable: 
{1=2}
LockTable: 
{}

ID of the program: 17
ExeStack: 
Compound Stmt ( HeapWriting: v2: Arithmetic exp: HeapReading: VarEval exp : v2 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v2), Compound Stmt ( countDown(cnt), FORK ( Compound Stmt ( HeapWriting: v3: Arithmetic exp: HeapReading: VarEval exp : v3 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v3), countDown(cnt))) ))))
Symbols Table: 
{r=Int value: 0, cnt=Int value: 1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: 
Int value: 20
Int value: 16
File Table: 
{}
Heap: 
{1=Int value: 20, 2=Int value: 3, 3=Int value: 4}
LatchTable: 
{1=2}
LockTable: 
{}

ID of the program: 7
ExeStack: 
await(cnt)
Compound Stmt ( print (Value exp: Int value: 100), Compound Stmt ( countDown(cnt), print (Value exp: Int value: 100)))
Symbols Table: 
{r=Int value: 0, cnt=Int value: 1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: 
Int value: 20
Int value: 16
File Table: 
{}
Heap: 
{1=Int value: 20, 2=Int value: 3, 3=Int value: 4}
LatchTable: 
{1=2}
LockTable: 
{}

ID of the program: 17
ExeStack: 
HeapWriting: v2: Arithmetic exp: HeapReading: VarEval exp : v2 * Value exp: Int value: 10
Compound Stmt ( print (HeapReading: VarEval exp : v2), Compound Stmt ( countDown(cnt), FORK ( Compound Stmt ( HeapWriting: v3: Arithmetic exp: HeapReading: VarEval exp : v3 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v3), countDown(cnt))) )))
Symbols Table: 
{r=Int value: 0, cnt=Int value: 1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: 
Int value: 20
Int value: 16
File Table: 
{}
Heap: 
{1=Int value: 20, 2=Int value: 3, 3=Int value: 4}
LatchTable: 
{1=2}
LockTable: 
{}

ID of the program: 7
ExeStack: 
await(cnt)
Compound Stmt ( print (Value exp: Int value: 100), Compound Stmt ( countDown(cnt), print (Value exp: Int value: 100)))
Symbols Table: 
{r=Int value: 0, cnt=Int value: 1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: 
Int value: 20
Int value: 16
File Table: 
{}
Heap: 
{1=Int value: 20, 2=Int value: 30, 3=Int value: 4}
LatchTable: 
{1=2}
LockTable: 
{}

ID of the program: 17
ExeStack: 
Compound Stmt ( print (HeapReading: VarEval exp : v2), Compound Stmt ( countDown(cnt), FORK ( Compound Stmt ( HeapWriting: v3: Arithmetic exp: HeapReading: VarEval exp : v3 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v3), countDown(cnt))) )))
Symbols Table: 
{r=Int value: 0, cnt=Int value: 1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: 
Int value: 20
Int value: 16
File Table: 
{}
Heap: 
{1=Int value: 20, 2=Int value: 30, 3=Int value: 4}
LatchTable: 
{1=2}
LockTable: 
{}

ID of the program: 7
ExeStack: 
await(cnt)
Compound Stmt ( print (Value exp: Int value: 100), Compound Stmt ( countDown(cnt), print (Value exp: Int value: 100)))
Symbols Table: 
{r=Int value: 0, cnt=Int value: 1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: 
Int value: 20
Int value: 16
File Table: 
{}
Heap: 
{1=Int value: 20, 2=Int value: 30, 3=Int value: 4}
LatchTable: 
{1=2}
LockTable: 
{}

ID of the program: 17
ExeStack: 
print (HeapReading: VarEval exp : v2)
Compound Stmt ( countDown(cnt), FORK ( Compound Stmt ( HeapWriting: v3: Arithmetic exp: HeapReading: VarEval exp : v3 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v3), countDown(cnt))) ))
Symbols Table: 
{r=Int value: 0, cnt=Int value: 1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: 
Int value: 20
Int value: 16
File Table: 
{}
Heap: 
{1=Int value: 20, 2=Int value: 30, 3=Int value: 4}
LatchTable: 
{1=2}
LockTable: 
{}

ID of the program: 7
ExeStack: 
await(cnt)
Compound Stmt ( print (Value exp: Int value: 100), Compound Stmt ( countDown(cnt), print (Value exp: Int value: 100)))
Symbols Table: 
{r=Int value: 0, cnt=Int value: 1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: 
Int value: 20
Int value: 16
Int value: 30
File Table: 
{}
Heap: 
{1=Int value: 20, 2=Int value: 30, 3=Int value: 4}
LatchTable: 
{1=2}
LockTable: 
{}

ID of the program: 17
ExeStack: 
Compound Stmt ( countDown(cnt), FORK ( Compound Stmt ( HeapWriting: v3: Arithmetic exp: HeapReading: VarEval exp : v3 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v3), countDown(cnt))) ))
Symbols Table: 
{r=Int value: 0, cnt=Int value: 1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: 
Int value: 20
Int value: 16
Int value: 30
File Table: 
{}
Heap: 
{1=Int value: 20, 2=Int value: 30, 3=Int value: 4}
LatchTable: 
{1=2}
LockTable: 
{}

ID of the program: 7
ExeStack: 
await(cnt)
Compound Stmt ( print (Value exp: Int value: 100), Compound Stmt ( countDown(cnt), print (Value exp: Int value: 100)))
Symbols Table: 
{r=Int value: 0, cnt=Int value: 1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: 
Int value: 20
Int value: 16
Int value: 30
File Table: 
{}
Heap: 
{1=Int value: 20, 2=Int value: 30, 3=Int value: 4}
LatchTable: 
{1=2}
LockTable: 
{}

ID of the program: 17
ExeStack: 
countDown(cnt)
FORK ( Compound Stmt ( HeapWriting: v3: Arithmetic exp: HeapReading: VarEval exp : v3 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v3), countDown(cnt))) )
Symbols Table: 
{r=Int value: 0, cnt=Int value: 1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: 
Int value: 20
Int value: 16
Int value: 30
File Table: 
{}
Heap: 
{1=Int value: 20, 2=Int value: 30, 3=Int value: 4}
LatchTable: 
{1=2}
LockTable: 
{}

ID of the program: 7
ExeStack: 
await(cnt)
Compound Stmt ( print (Value exp: Int value: 100), Compound Stmt ( countDown(cnt), print (Value exp: Int value: 100)))
Symbols Table: 
{r=Int value: 0, cnt=Int value: 1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: 
Int value: 20
Int value: 16
Int value: 30
Int value: 17
File Table: 
{}
Heap: 
{1=Int value: 20, 2=Int value: 30, 3=Int value: 4}
LatchTable: 
{1=1}
LockTable: 
{}

ID of the program: 17
ExeStack: 
FORK ( Compound Stmt ( HeapWriting: v3: Arithmetic exp: HeapReading: VarEval exp : v3 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v3), countDown(cnt))) )
Symbols Table: 
{r=Int value: 0, cnt=Int value: 1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: 
Int value: 20
Int value: 16
Int value: 30
Int value: 17
File Table: 
{}
Heap: 
{1=Int value: 20, 2=Int value: 30, 3=Int value: 4}
LatchTable: 
{1=1}
LockTable: 
{}

ID of the program: 7
ExeStack: 
await(cnt)
Compound Stmt ( print (Value exp: Int value: 100), Compound Stmt ( countDown(cnt), print (Value exp: Int value: 100)))
Symbols Table: 
{r=Int value: 0, cnt=Int value: 1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: 
Int value: 20
Int value: 16
Int value: 30
Int value: 17
File Table: 
{}
Heap: 
{1=Int value: 20, 2=Int value: 30, 3=Int value: 4}
LatchTable: 
{1=1}
LockTable: 
{}

ID of the program: 17
ExeStack: 
Symbols Table: 
{r=Int value: 0, cnt=Int value: 1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: 
Int value: 20
Int value: 16
Int value: 30
Int value: 17
File Table: 
{}
Heap: 
{1=Int value: 20, 2=Int value: 30, 3=Int value: 4}
LatchTable: 
{1=1}
LockTable: 
{}

ID of the program: 18
ExeStack: 
Compound Stmt ( HeapWriting: v3: Arithmetic exp: HeapReading: VarEval exp : v3 * Value exp: Int value: 10, Compound Stmt ( print (HeapReading: VarEval exp : v3), countDown(cnt)))
Symbols Table: 
{r=Int value: 0, cnt=Int value: 1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: 
Int value: 20
Int value: 16
Int value: 30
Int value: 17
File Table: 
{}
Heap: 
{1=Int value: 20, 2=Int value: 30, 3=Int value: 4}
LatchTable: 
{1=1}
LockTable: 
{}

ID of the program: 7
ExeStack: 
await(cnt)
Compound Stmt ( print (Value exp: Int value: 100), Compound Stmt ( countDown(cnt), print (Value exp: Int value: 100)))
Symbols Table: 
{r=Int value: 0, cnt=Int value: 1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: 
Int value: 20
Int value: 16
Int value: 30
Int value: 17
File Table: 
{}
Heap: 
{1=Int value: 20, 2=Int value: 30, 3=Int value: 4}
LatchTable: 
{1=1}
LockTable: 
{}

ID of the program: 18
ExeStack: 
HeapWriting: v3: Arithmetic exp: HeapReading: VarEval exp : v3 * Value exp: Int value: 10
Compound Stmt ( print (HeapReading: VarEval exp : v3), countDown(cnt))
Symbols Table: 
{r=Int value: 0, cnt=Int value: 1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: 
Int value: 20
Int value: 16
Int value: 30
Int value: 17
File Table: 
{}
Heap: 
{1=Int value: 20, 2=Int value: 30, 3=Int value: 4}
LatchTable: 
{1=1}
LockTable: 
{}

ID of the program: 7
ExeStack: 
await(cnt)
Compound Stmt ( print (Value exp: Int value: 100), Compound Stmt ( countDown(cnt), print (Value exp: Int value: 100)))
Symbols Table: 
{r=Int value: 0, cnt=Int value: 1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: 
Int value: 20
Int value: 16
Int value: 30
Int value: 17
File Table: 
{}
Heap: 
{1=Int value: 20, 2=Int value: 30, 3=Int value: 40}
LatchTable: 
{1=1}
LockTable: 
{}

ID of the program: 18
ExeStack: 
Compound Stmt ( print (HeapReading: VarEval exp : v3), countDown(cnt))
Symbols Table: 
{r=Int value: 0, cnt=Int value: 1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: 
Int value: 20
Int value: 16
Int value: 30
Int value: 17
File Table: 
{}
Heap: 
{1=Int value: 20, 2=Int value: 30, 3=Int value: 40}
LatchTable: 
{1=1}
LockTable: 
{}

ID of the program: 7
ExeStack: 
await(cnt)
Compound Stmt ( print (Value exp: Int value: 100), Compound Stmt ( countDown(cnt), print (Value exp: Int value: 100)))
Symbols Table: 
{r=Int value: 0, cnt=Int value: 1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: 
Int value: 20
Int value: 16
Int value: 30
Int value: 17
File Table: 
{}
Heap: 
{1=Int value: 20, 2=Int value: 30, 3=Int value: 40}
LatchTable: 
{1=1}
LockTable: 
{}

ID of the program: 18
ExeStack: 
print (HeapReading: VarEval exp : v3)
countDown(cnt)
Symbols Table: 
{r=Int value: 0, cnt=Int value: 1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: 
Int value: 20
Int value: 16
Int value: 30
Int value: 17
File Table: 
{}
Heap: 
{1=Int value: 20, 2=Int value: 30, 3=Int value: 40}
LatchTable: 
{1=1}
LockTable: 
{}

ID of the program: 7
ExeStack: 
await(cnt)
Compound Stmt ( print (Value exp: Int value: 100), Compound Stmt ( countDown(cnt), print (Value exp: Int value: 100)))
Symbols Table: 
{r=Int value: 0, cnt=Int value: 1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: 
Int value: 20
Int value: 16
Int value: 30
Int value: 17
Int value: 40
File Table: 
{}
Heap: 
{1=Int value: 20, 2=Int value: 30, 3=Int value: 40}
LatchTable: 
{1=1}
LockTable: 
{}

ID of the program: 18
ExeStack: 
countDown(cnt)
Symbols Table: 
{r=Int value: 0, cnt=Int value: 1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: 
Int value: 20
Int value: 16
Int value: 30
Int value: 17
Int value: 40
File Table: 
{}
Heap: 
{1=Int value: 20, 2=Int value: 30, 3=Int value: 40}
LatchTable: 
{1=1}
LockTable: 
{}

ID of the program: 7
ExeStack: 
await(cnt)
Compound Stmt ( print (Value exp: Int value: 100), Compound Stmt ( countDown(cnt), print (Value exp: Int value: 100)))
Symbols Table: 
{r=Int value: 0, cnt=Int value: 1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: 
Int value: 20
Int value: 16
Int value: 30
Int value: 17
Int value: 40
Int value: 18
File Table: 
{}
Heap: 
{1=Int value: 20, 2=Int value: 30, 3=Int value: 40}
LatchTable: 
{1=0}
LockTable: 
{}

ID of the program: 18
ExeStack: 
Symbols Table: 
{r=Int value: 0, cnt=Int value: 1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: 
Int value: 20
Int value: 16
Int value: 30
Int value: 17
Int value: 40
Int value: 18
File Table: 
{}
Heap: 
{1=Int value: 20, 2=Int value: 30, 3=Int value: 40}
LatchTable: 
{1=0}
LockTable: 
{}

ID of the program: 7
ExeStack: 
Compound Stmt ( print (Value exp: Int value: 100), Compound Stmt ( countDown(cnt), print (Value exp: Int value: 100)))
Symbols Table: 
{r=Int value: 0, cnt=Int value: 1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: 
Int value: 20
Int value: 16
Int value: 30
Int value: 17
Int value: 40
Int value: 18
File Table: 
{}
Heap: 
{1=Int value: 20, 2=Int value: 30, 3=Int value: 40}
LatchTable: 
{1=0}
LockTable: 
{}

ID of the program: 7
ExeStack: 
print (Value exp: Int value: 100)
Compound Stmt ( countDown(cnt), print (Value exp: Int value: 100))
Symbols Table: 
{r=Int value: 0, cnt=Int value: 1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: 
Int value: 20
Int value: 16
Int value: 30
Int value: 17
Int value: 40
Int value: 18
File Table: 
{}
Heap: 
{1=Int value: 20, 2=Int value: 30, 3=Int value: 40}
LatchTable: 
{1=0}
LockTable: 
{}

ID of the program: 7
ExeStack: 
Compound Stmt ( countDown(cnt), print (Value exp: Int value: 100))
Symbols Table: 
{r=Int value: 0, cnt=Int value: 1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: 
Int value: 20
Int value: 16
Int value: 30
Int value: 17
Int value: 40
Int value: 18
Int value: 100
File Table: 
{}
Heap: 
{1=Int value: 20, 2=Int value: 30, 3=Int value: 40}
LatchTable: 
{1=0}
LockTable: 
{}

ID of the program: 7
ExeStack: 
countDown(cnt)
print (Value exp: Int value: 100)
Symbols Table: 
{r=Int value: 0, cnt=Int value: 1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: 
Int value: 20
Int value: 16
Int value: 30
Int value: 17
Int value: 40
Int value: 18
Int value: 100
File Table: 
{}
Heap: 
{1=Int value: 20, 2=Int value: 30, 3=Int value: 40}
LatchTable: 
{1=0}
LockTable: 
{}

ID of the program: 7
ExeStack: 
print (Value exp: Int value: 100)
Symbols Table: 
{r=Int value: 0, cnt=Int value: 1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: 
Int value: 20
Int value: 16
Int value: 30
Int value: 17
Int value: 40
Int value: 18
Int value: 100
Int value: 7
File Table: 
{}
Heap: 
{1=Int value: 20, 2=Int value: 30, 3=Int value: 40}
LatchTable: 
{1=0}
LockTable: 
{}

ID of the program: 7
ExeStack: 
Symbols Table: 
{r=Int value: 0, cnt=Int value: 1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: 
Int value: 20
Int value: 16
Int value: 30
Int value: 17
Int value: 40
Int value: 18
Int value: 100
Int value: 7
Int value: 100
File Table: 
{}
Heap: 
{1=Int value: 20, 2=Int value: 30, 3=Int value: 40}
LatchTable: 
{1=0}
LockTable: 
{}

